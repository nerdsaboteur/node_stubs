;(function(){var require = function (file, cwd) {
    var resolved = require.resolve(file, cwd || '/');
    var mod = require.modules[resolved];
    if (!mod) throw new Error(
        'Failed to resolve module ' + file + ', tried ' + resolved
    );
    var res = mod._cached ? mod._cached : mod();
    return res;
}
var __require = require;

require.paths = [];
require.modules = {};
require.extensions = [".js",".coffee"];

require._core = {
    'assert': true,
    'events': true,
    'fs': true,
    'path': true,
    'vm': true
};

require.resolve = (function () {
    return function (x, cwd) {
        if (!cwd) cwd = '/';
        
        if (require._core[x]) return x;
        var path = require.modules.path();
        var y = cwd || '.';
        
        if (x.match(/^(?:\.\.?\/|\/)/)) {
            var m = loadAsFileSync(path.resolve(y, x))
                || loadAsDirectorySync(path.resolve(y, x));
            if (m) return m;
        }
        
        var n = loadNodeModulesSync(x, y);
        if (n) return n;
        
        throw new Error("Cannot find module '" + x + "'");
        
        function loadAsFileSync (x) {
            if (require.modules[x]) {
                return x;
            }
            
            for (var i = 0; i < require.extensions.length; i++) {
                var ext = require.extensions[i];
                if (require.modules[x + ext]) return x + ext;
            }
        }
        
        function loadAsDirectorySync (x) {
            x = x.replace(/\/+$/, '');
            var pkgfile = x + '/package.json';
            if (require.modules[pkgfile]) {
                var pkg = require.modules[pkgfile]();
                var b = pkg.browserify;
                if (typeof b === 'object' && b.main) {
                    var m = loadAsFileSync(path.resolve(x, b.main));
                    if (m) return m;
                }
                else if (typeof b === 'string') {
                    var m = loadAsFileSync(path.resolve(x, b));
                    if (m) return m;
                }
                else if (pkg.main) {
                    var m = loadAsFileSync(path.resolve(x, pkg.main));
                    if (m) return m;
                }
            }
            
            return loadAsFileSync(x + '/index');
        }
        
        function loadNodeModulesSync (x, start) {
            var dirs = nodeModulesPathsSync(start);
            for (var i = 0; i < dirs.length; i++) {
                var dir = dirs[i];
                var m = loadAsFileSync(dir + '/' + x);
                if (m) return m;
                var n = loadAsDirectorySync(dir + '/' + x);
                if (n) return n;
            }
            
            var m = loadAsFileSync(x);
            if (m) return m;
        }
        
        function nodeModulesPathsSync (start) {
            var parts;
            if (start === '/') parts = [ '' ];
            else parts = path.normalize(start).split('/');
            
            var dirs = [];
            for (var i = parts.length - 1; i >= 0; i--) {
                if (parts[i] === 'node_modules') continue;
                var dir = parts.slice(0, i + 1).join('/') + '/node_modules';
                dirs.push(dir);
            }
            
            return dirs;
        }
    };
})();

require.alias = function (from, to) {
    var path = require.modules.path();
    var res = null;
    try {
        res = require.resolve(from + '/package.json', '/');
    }
    catch (err) {
        res = require.resolve(from, '/');
    }
    var basedir = path.dirname(res);
    
    var keys = Object_keys(require.modules);
    
    for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (key.slice(0, basedir.length + 1) === basedir + '/') {
            var f = key.slice(basedir.length);
            require.modules[to + f] = require.modules[basedir + f];
        }
        else if (key === basedir) {
            require.modules[to] = require.modules[basedir];
        }
    }
};

require.define = function (filename, fn) {
    var dirname = require._core[filename]
        ? ''
        : require.modules.path().dirname(filename)
    ;
    
    var require_ = function (file) { return require(file, dirname) };
    require_.resolve = function (name) {
      return require.resolve(name, dirname);
    };
    require_.modules = require.modules;
    var module_ = { exports : {} };
    
    require.modules[filename] = function () {
        fn.call(
            module_.exports,
            require_,
            module_,
            module_.exports,
            dirname,
            filename
        );
        require.modules[filename]._cached = module_.exports;
        return module_.exports;
    };
};

var Object_keys = Object.keys || function (obj) {
    var res = [];
    for (var key in obj) res.push(key)
    return res;
};

if (typeof process === 'undefined') process = {};

if (!process.nextTick) process.nextTick = function (fn) {
    setTimeout(fn, 0);
};

if (!process.title) process.title = 'browser';

if (!process.binding) process.binding = function (name) {
    if (name === 'evals') return require('vm')
    else throw new Error('No such module')
};

if (!process.cwd) process.cwd = function () { return '.' };

require.define("path", function (require, module, exports, __dirname, __filename) {
    function filter (xs, fn) {
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (fn(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length; i >= 0; i--) {
    var last = parts[i];
    if (last == '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Regex to split a filename into [*, dir, basename, ext]
// posix version
var splitPathRe = /^(.+\/(?!$)|\/)?((?:.+?)?(\.[^.]*)?)$/;

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
var resolvedPath = '',
    resolvedAbsolute = false;

for (var i = arguments.length; i >= -1 && !resolvedAbsolute; i--) {
  var path = (i >= 0)
      ? arguments[i]
      : process.cwd();

  // Skip empty and invalid entries
  if (typeof path !== 'string' || !path) {
    continue;
  }

  resolvedPath = path + '/' + resolvedPath;
  resolvedAbsolute = path.charAt(0) === '/';
}

// At this point the path should be resolved to a full absolute path, but
// handle relative paths to be safe (might happen when process.cwd() fails)

// Normalize the path
resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
var isAbsolute = path.charAt(0) === '/',
    trailingSlash = path.slice(-1) === '/';

// Normalize the path
path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }
  
  return (isAbsolute ? '/' : '') + path;
};


// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    return p && typeof p === 'string';
  }).join('/'));
};


exports.dirname = function(path) {
  var dir = splitPathRe.exec(path)[1] || '';
  var isWindows = false;
  if (!dir) {
    // No dirname
    return '.';
  } else if (dir.length === 1 ||
      (isWindows && dir.length <= 3 && dir.charAt(1) === ':')) {
    // It is just a slash or a drive letter with a slash
    return dir;
  } else {
    // It is a full dirname, strip trailing slash
    return dir.substring(0, dir.length - 1);
  }
};


exports.basename = function(path, ext) {
  var f = splitPathRe.exec(path)[2] || '';
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPathRe.exec(path)[3] || '';
};

});

require.define("/formatdate.js", function (require, module, exports, __dirname, __filename) {
    (function() {
  var ago, deepmerge, defaults, floor, foldl, formats, from_now, hook, isArray, locale, now, pad, round, separate_unit, strftime, sum, _ref, _ref2;
  deepmerge = require('deepmerge');
  now = (_ref = (_ref2 = typeof performance !== "undefined" && performance !== null ? performance.now : void 0) != null ? _ref2 : typeof Date !== "undefined" && Date !== null ? Date.now : void 0) != null ? _ref : function() {
    return new Date().getTime();
  };
  floor = Math.floor, round = Math.round;
  isArray = Array.isArray;
  if (typeof exports === "undefined" || exports === null) {
    exports = this.formatdate = {};
  }
  foldl = function(object, array, worker) {
    var value, _i, _len;
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      value = array[_i];
      object = worker(object, value);
    }
    return object;
  };
  sum = function(array) {
    var res, value, _i, _len;
    res = 0;
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      value = array[_i];
      res += value;
    }
    return res;
  };
  pad = function(len, n, str) {
    var res;
    if (str == null) {
      str = "0";
    }
    res = "" + n;
    while (res.length < len) {
      res = str + res;
    }
    return res;
  };
  exports.locale = locale = {
    'default': "%T",
    formats: {
      '%': "%",
      ' ': " ",
      D: "%m/%d/%y",
      F: "%Y-%m-%d",
      h: "%b",
      n: "\n",
      r: "%I:%M:%S %p",
      R: "%H:%M",
      t: "\t",
      T: "%H:%M:%S"
    },
    day: {
      full: "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(' '),
      abbr: "Sun Mon Tue Wed Thu Fri Sat".split(' ')
    },
    month: {
      full: "January February March April May June July August September October November December".split(' '),
      abbr: "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(' ')
    },
    unit: "millisecond second minute hour day week month year decade century".split(' '),
    ago: function(amount, unit, opts) {
      var res, _base, _base2, _base3, _base4, _base5, _ref10, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      if ((_ref3 = opts.max) == null) {
        opts.max = {};
      }
      if ((_ref4 = (_base = opts.max).unit) == null) {
        _base.unit = defaults.max.unit;
      }
      if ((_ref5 = (_base2 = opts.max).amount) == null) {
        _base2.amount = defaults.max.amount;
      }
      if ((_ref6 = opts.min) == null) {
        opts.min = {};
      }
      if ((_ref7 = (_base3 = opts.min).unit) == null) {
        _base3.unit = defaults.min.unit;
      }
      if ((_ref8 = (_base4 = opts.min).amount) == null) {
        _base4.amount = defaults.min.amount;
      }
      if ((_ref9 = (_base5 = opts.min).string) == null) {
        _base5.string = defaults.min.string;
      }
      if ((_ref10 = opts.show_ago) == null) {
        opts.show_ago = defaults.show_ago;
      }
      if (unit > opts.max.unit || (unit === opts.max.unit && amount > opts.max.amount)) {
        return false;
      }
      if (unit < opts.min.unit || (unit === opts.min.unit && amount < opts.min.amount)) {
        return opts.min.string;
      }
      res = "";
      if (amount > 1) {
        res += amount;
      }
      if (amount <= 1) {
        res += "a";
      }
      if (amount <= 1 && unit === 3) {
        res += "n";
      }
      res += " " + opts.locale.unit[unit];
      if (amount > 1 && unit === 9) {
        res = res.substr(0, res.length - 1) + "ie";
      }
      if (amount > 1) {
        res += "s";
      }
      if (opts.show_ago) {
        res += " ago";
      }
      return res;
    }
  };
  exports.formats = formats = {
    '%': function(_, l) {
      return l.formats['%'];
    },
    a: function(d, l) {
      return l.day.abbr[d.getDay()];
    },
    A: function(d, l) {
      return l.day.full[d.getDay()];
    },
    b: function(d, l) {
      return l.month.abbr[d.getMonth()];
    },
    B: function(d, l) {
      return l.month.full[d.getMonth()];
    },
    c: function(d, l) {},
    C: function(d) {
      return pad(2, floor(d.getFullYear() / 100));
    },
    d: function(d) {
      return pad(2, d.getDate());
    },
    D: function(d, l) {
      return strftime(l.formats.D, d, l);
    },
    e: function(d, l) {
      var _ref3;
      return (_ref3 = formats.d(d)) != null ? _ref3.replace('0', l.formats[' ']) : void 0;
    },
    E: function(d, l) {},
    F: function(d, l) {
      return strftime(l.formats.F, d, l);
    },
    f: function(d, l) {
      return ago(now() - d.getTime(), {
        locale: l,
        show_ago: false
      });
    },
    G: function(d) {},
    g: function(d) {},
    h: function(d, l) {
      return strftime(l.formats.h, d, l);
    },
    H: function(d) {
      return pad(2, d.getHours());
    },
    I: function(d) {
      var h;
      h = d.getHours() || 12;
      return pad(2, h - (h > 12 && 12 || 0));
    },
    j: function(d) {
      return pad(3, floor((d - new Date("1.1." + (d.getFullYear()))) / (1000 * 60 * 60 * 24)));
    },
    k: function(d, l) {
      return pad(2, d.getHours(), l.formats[' ']);
    },
    l: function(d, l) {
      var h;
      h = d.getHours() || 12;
      return pad(2, h - (h > 12 && 12 || 0), l.formats[' ']);
    },
    m: function(d) {
      return pad(2, d.getMonth() + 1);
    },
    M: function(d) {
      return pad(2, d.getMinutes());
    },
    n: function(d, l) {
      return l.formats.n;
    },
    O: function(d) {},
    p: function(d) {},
    P: function(d) {
      var _ref3;
      return (_ref3 = formats.p(d)) != null ? _ref3.toLowerCase() : void 0;
    },
    r: function(d, l) {
      return strftime(l.formats.r, d, l);
    },
    R: function(d, l) {
      return strftime(l.formats.R, d, l);
    },
    s: function(d) {
      return floor(d.getTime() / 1000);
    },
    S: function(d) {
      return pad(2, d.getSeconds());
    },
    t: function(d, l) {
      return l.formats.t;
    },
    T: function(d, l) {
      return strftime(l.formats.T, d, l);
    },
    u: function(d) {
      return (d.getDay() + 5) % 6 + 1;
    },
    U: function(d) {},
    V: function(d) {},
    w: function(d) {
      return d.getDay();
    },
    W: function(d) {},
    x: function(d) {},
    X: function(d) {},
    y: function(d) {
      var y;
      y = d.getFullYear();
      return pad(2, y - floor(y / 100) * 100);
    },
    Y: function(d) {
      return d.getFullYear();
    },
    z: function(d) {},
    Z: function(d) {}
  };
  exports.strftime = strftime = function(text, d, loc) {
    var f, k, regex;
    if (text == null) {
      text = locale["default"];
    }
    if (d == null) {
      d = null;
    }
    if (loc == null) {
      loc = locale;
    }
    if (d == null) {
      d = new Date;
    }
    if (typeof d === 'string') {
      d = new Date(d);
    }
    for (k in formats) {
      f = formats[k];
      regex = new RegExp("%" + k, 'g');
      if (regex.test(text)) {
        text = text.replace(regex, f(d, loc));
      }
    }
    return text;
  };
  exports.separate_unit = separate_unit = function(d) {
    var T, r, s, u, x, _ref3;
    _ref3 = [{}, 1, [1000, 60, 60, 24, 7, 30 / 7, 12, 10, 10]], r = _ref3[0], x = _ref3[1], T = _ref3[2];
    r.unit = u = sum(T.map(function(n) {
      return d >= (x *= n);
    }));
    r.size = s = foldl(1, T.slice(0, u), function(a, b) {
      return a * b;
    });
    r.amount = round(d / s || 1);
    return r;
  };
  exports.ago = ago = function(dd, opts) {
    var amount, unit, _ref3, _ref4;
    if (opts == null) {
      opts = {};
    }
    if ((_ref3 = opts.locale) == null) {
      opts.locale = locale;
    }
    _ref4 = separate_unit(dd), amount = _ref4.amount, unit = _ref4.unit;
    return opts.locale.ago(amount, unit, opts);
  };
  exports.from_now = from_now = function(date, opts) {
    var _ref3;
    if (opts == null) {
      opts = {};
    }
    if (!date) {
      return;
    }
    if ((_ref3 = opts.locale) == null) {
      opts.locale = locale;
    }
    if (typeof date === 'string' || typeof date === 'number') {
      date = new Date(date);
    }
    return ago(now() - date.getTime(), opts) || strftime(opts.format, date, opts.locale);
  };
  exports.smart = function(elem, opts) {
    var interval, old_unit, res;
    if (opts == null) {
      opts = {};
    }
    opts = deepmerge(defaults, opts);
    old_unit = -1;
    interval = void 0;
    res = {
      stop: function() {
        if (interval != null) {
          return clearInterval(interval);
        }
      }
    };
    res.update = function() {
      var date, size, t, unit, _ref3;
      date = hook.update(elem, opts);
      if (!date > 0) {
        res.stop();
        interval = setInterval(res.update, opts.hook.interval);
        return;
      }
      _ref3 = separate_unit(date), unit = _ref3.unit, size = _ref3.size;
      if (unit === old_unit) {
        return;
      }
      if (unit > opts.smart.max_unit) {
        return res.stop();
      }
      t = (unit * size) || opts.hook.interval;
      res.stop();
      interval = setInterval(res.update, t);
      return old_unit = unit;
    };
    res.update();
    return res;
  };
  exports.hook = hook = function(elems, opts) {
    var interval, res;
    if (opts == null) {
      opts = {};
    }
    opts = deepmerge(defaults, opts);
    res = {
      stop: function() {
        return clearInterval(interval);
      },
      update: function() {
        return opts.hook.update(elems, opts);
      }
    };
    if (opts.update) {
      interval = setInterval(res.update, opts.hook.interval);
    }
    res.update();
    return res;
  };
  hook.update = function(el, opts) {
    var cls, date, title_format, _ref3, _ref4;
    if (opts == null) {
      opts = {};
    }
    date = (_ref3 = el != null ? typeof el.attr === "function" ? el.attr('data-date') : void 0 : void 0) != null ? _ref3 : el != null ? typeof el.attr === "function" ? el.attr('datetime') : void 0 : void 0;
    if (!(date != null)) {
      return;
    }
    if (typeof date === 'string' || typeof date === 'number') {
      date = new Date(date);
    }
    opts.format = el.attr('data-strftime') || opts.format;
    title_format = el.attr('data-strftitle') || opts.format;
    el.attr('title', strftime(title_format, date, opts.locale));
    cls = (_ref4 = el.attr('class')) != null ? _ref4 : "";
    if (cls.indexOf(opts.css.ago) !== -1) {
      el.text(from_now(date, opts));
      return now() - date.getTime();
    } else {
      el.text(strftime(opts.format, date, opts.locale));
      return date;
    }
  };
  hook.update.dynamictemplate = function(elems, opts) {
    var el, _i, _len;
    if (opts == null) {
      opts = {};
    }
    for (_i = 0, _len = elems.length; _i < _len; _i++) {
      el = elems[_i];
      hook.update(el, opts);
    }
  };
  hook.update.jQuery = function(elems, opts) {
    if (opts == null) {
      opts = {};
    }
    return $(elems).filter("time, [data-date]").each(function() {
      return hook.update($(this), opts);
    });
  };
  exports.options = defaults = {
    locale: locale,
    update: true,
    show_ago: true,
    hook: {
      interval: 5000,
      update: hook.update.jQuery
    },
    smart: {
      max_unit: 5
    },
    css: {
      ago: "ago"
    },
    max: {
      amount: 42,
      unit: 9
    },
    min: {
      amount: 5,
      unit: 1,
      string: "just now"
    }
  };
  if (typeof jQuery !== "undefined" && jQuery !== null) {
    jQuery.fn.formatdate = function(opts) {
      return hook(this, opts);
    };
  }
}).call(this);

});

require.define("/node_modules/deepmerge/package.json", function (require, module, exports, __dirname, __filename) {
    module.exports = {"author":{"name":"Nick Fisher"},"name":"deepmerge","description":"A library for deep (recursive) merging of Javascript objects","version":"0.2.5","homepage":"https://github.com/nrf110/deepmerge","repository":{"type":"git","url":"git://github.com/nrf110/deepmerge.git"},"main":"index","engines":{"node":">=0.4.0"},"scripts":{"test":"tap test/*.js"},"dependencies":{},"devDependencies":{"tap":"~0.2.4"},"readme":"deepmerge\n=========\n\nMerge the enumerable attributes of two objects deeply.\n\nexample\n=======\n\n```js\nvar util = require('util')\nvar merge = require('deepmerge')\n\nvar x = { foo: { bar: 3 },\n  array: [ { does: 'work', too: [ 1, 2, 3 ] } ] }\nvar y = { foo: { baz: 4 },\n  quux: 5,\n  array: [ { does: 'work', too: [ 4, 5, 6 ] }, { really: 'yes' } ] }\n\nconsole.log(util.inspect(merge(x, y), false, null))\n```\n\noutput:\n\n```js\n{ foo: { bar: 3, baz: 4 },\n  array: [ { does: 'work', too: [ 1, 2, 3, 4, 5, 6 ] }, { really: 'yes' } ],\n  quux: 5 }\n```\n\nmethods\n=======\n\nvar merge = require('deepmerge')\n\nmerge(x, y)\n-----------\n\nMerge two objects `x` and `y` deeply, returning a new merged object with the\nelements from both `x` and `y`.\n\nIf an element at the same key is present for both `x` and `y`, the value from\n`y` will appear in the result.\n\nThe merge is immutable, so neither `x` nor `y` will be modified.\n\nThe merge will also merge arrays and array values.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install deepmerge\n```\n\ntest\n====\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm test\n```\n","_id":"deepmerge@0.2.5","dist":{"shasum":"3d8d9390d1dac4c92bf669d2256e4931109f1c3e"},"_from":"deepmerge"}
});

require.define("/node_modules/deepmerge/index.js", function (require, module, exports, __dirname, __filename) {
    module.exports = function merge (target, src) {
    var array = Array.isArray(src)
    var dst = array && [] || {}

    if (array) {
        target = target || []
        dst = dst.concat(target)
        src.forEach(function(e, i) {
            if (typeof e === 'object') {
                dst[i] = merge(target[i], e)
            } else {
                if (target.indexOf(e) === -1) {
                    dst.push(e)
                }
            }
        })
    } else {
        if (target && typeof target === 'object') {
            Object.keys(target).forEach(function (key) {
                dst[key] = target[key]
            })
        }
        Object.keys(src).forEach(function (key) {
            if (typeof src[key] !== 'object' || !src[key]) {
                dst[key] = src[key]
            }
            else {
                if (!target[key]) {
                    dst[key] = src[key]
                } else {
                    dst[key] = merge(target[key], src[key])
                }
            }
        })
    }

    return dst
}

});
;require('./formatdate');}).call(this);