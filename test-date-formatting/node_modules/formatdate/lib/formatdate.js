(function() {
  var ago, deepmerge, defaults, floor, foldl, formats, from_now, hook, isArray, locale, now, pad, round, separate_unit, strftime, sum, _ref, _ref2;
  deepmerge = require('deepmerge');
  now = (_ref = (_ref2 = typeof performance !== "undefined" && performance !== null ? performance.now : void 0) != null ? _ref2 : typeof Date !== "undefined" && Date !== null ? Date.now : void 0) != null ? _ref : function() {
    return new Date().getTime();
  };
  floor = Math.floor, round = Math.round;
  isArray = Array.isArray;
  if (typeof exports === "undefined" || exports === null) {
    exports = this.formatdate = {};
  }
  foldl = function(object, array, worker) {
    var value, _i, _len;
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      value = array[_i];
      object = worker(object, value);
    }
    return object;
  };
  sum = function(array) {
    var res, value, _i, _len;
    res = 0;
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      value = array[_i];
      res += value;
    }
    return res;
  };
  pad = function(len, n, str) {
    var res;
    if (str == null) {
      str = "0";
    }
    res = "" + n;
    while (res.length < len) {
      res = str + res;
    }
    return res;
  };
  exports.locale = locale = {
    'default': "%T",
    formats: {
      '%': "%",
      ' ': " ",
      D: "%m/%d/%y",
      F: "%Y-%m-%d",
      h: "%b",
      n: "\n",
      r: "%I:%M:%S %p",
      R: "%H:%M",
      t: "\t",
      T: "%H:%M:%S"
    },
    day: {
      full: "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(' '),
      abbr: "Sun Mon Tue Wed Thu Fri Sat".split(' ')
    },
    month: {
      full: "January February March April May June July August September October November December".split(' '),
      abbr: "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(' ')
    },
    unit: "millisecond second minute hour day week month year decade century".split(' '),
    ago: function(amount, unit, opts) {
      var res, _base, _base2, _base3, _base4, _base5, _ref10, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      if ((_ref3 = opts.max) == null) {
        opts.max = {};
      }
      if ((_ref4 = (_base = opts.max).unit) == null) {
        _base.unit = defaults.max.unit;
      }
      if ((_ref5 = (_base2 = opts.max).amount) == null) {
        _base2.amount = defaults.max.amount;
      }
      if ((_ref6 = opts.min) == null) {
        opts.min = {};
      }
      if ((_ref7 = (_base3 = opts.min).unit) == null) {
        _base3.unit = defaults.min.unit;
      }
      if ((_ref8 = (_base4 = opts.min).amount) == null) {
        _base4.amount = defaults.min.amount;
      }
      if ((_ref9 = (_base5 = opts.min).string) == null) {
        _base5.string = defaults.min.string;
      }
      if ((_ref10 = opts.show_ago) == null) {
        opts.show_ago = defaults.show_ago;
      }
      if (unit > opts.max.unit || (unit === opts.max.unit && amount > opts.max.amount)) {
        return false;
      }
      if (unit < opts.min.unit || (unit === opts.min.unit && amount < opts.min.amount)) {
        return opts.min.string;
      }
      res = "";
      if (amount > 1) {
        res += amount;
      }
      if (amount <= 1) {
        res += "a";
      }
      if (amount <= 1 && unit === 3) {
        res += "n";
      }
      res += " " + opts.locale.unit[unit];
      if (amount > 1 && unit === 9) {
        res = res.substr(0, res.length - 1) + "ie";
      }
      if (amount > 1) {
        res += "s";
      }
      if (opts.show_ago) {
        res += " ago";
      }
      return res;
    }
  };
  exports.formats = formats = {
    '%': function(_, l) {
      return l.formats['%'];
    },
    a: function(d, l) {
      return l.day.abbr[d.getDay()];
    },
    A: function(d, l) {
      return l.day.full[d.getDay()];
    },
    b: function(d, l) {
      return l.month.abbr[d.getMonth()];
    },
    B: function(d, l) {
      return l.month.full[d.getMonth()];
    },
    c: function(d, l) {},
    C: function(d) {
      return pad(2, floor(d.getFullYear() / 100));
    },
    d: function(d) {
      return pad(2, d.getDate());
    },
    D: function(d, l) {
      return strftime(l.formats.D, d, l);
    },
    e: function(d, l) {
      var _ref3;
      return (_ref3 = formats.d(d)) != null ? _ref3.replace('0', l.formats[' ']) : void 0;
    },
    E: function(d, l) {},
    F: function(d, l) {
      return strftime(l.formats.F, d, l);
    },
    f: function(d, l) {
      return ago(now() - d.getTime(), {
        locale: l,
        show_ago: false
      });
    },
    G: function(d) {},
    g: function(d) {},
    h: function(d, l) {
      return strftime(l.formats.h, d, l);
    },
    H: function(d) {
      return pad(2, d.getHours());
    },
    I: function(d) {
      var h;
      h = d.getHours() || 12;
      return pad(2, h - (h > 12 && 12 || 0));
    },
    j: function(d) {
      return pad(3, floor((d - new Date("1.1." + (d.getFullYear()))) / (1000 * 60 * 60 * 24)));
    },
    k: function(d, l) {
      return pad(2, d.getHours(), l.formats[' ']);
    },
    l: function(d, l) {
      var h;
      h = d.getHours() || 12;
      return pad(2, h - (h > 12 && 12 || 0), l.formats[' ']);
    },
    m: function(d) {
      return pad(2, d.getMonth() + 1);
    },
    M: function(d) {
      return pad(2, d.getMinutes());
    },
    n: function(d, l) {
      return l.formats.n;
    },
    O: function(d) {},
    p: function(d) {},
    P: function(d) {
      var _ref3;
      return (_ref3 = formats.p(d)) != null ? _ref3.toLowerCase() : void 0;
    },
    r: function(d, l) {
      return strftime(l.formats.r, d, l);
    },
    R: function(d, l) {
      return strftime(l.formats.R, d, l);
    },
    s: function(d) {
      return floor(d.getTime() / 1000);
    },
    S: function(d) {
      return pad(2, d.getSeconds());
    },
    t: function(d, l) {
      return l.formats.t;
    },
    T: function(d, l) {
      return strftime(l.formats.T, d, l);
    },
    u: function(d) {
      return (d.getDay() + 5) % 6 + 1;
    },
    U: function(d) {},
    V: function(d) {},
    w: function(d) {
      return d.getDay();
    },
    W: function(d) {},
    x: function(d) {},
    X: function(d) {},
    y: function(d) {
      var y;
      y = d.getFullYear();
      return pad(2, y - floor(y / 100) * 100);
    },
    Y: function(d) {
      return d.getFullYear();
    },
    z: function(d) {},
    Z: function(d) {}
  };
  exports.strftime = strftime = function(text, d, loc) {
    var f, k, regex;
    if (text == null) {
      text = locale["default"];
    }
    if (d == null) {
      d = null;
    }
    if (loc == null) {
      loc = locale;
    }
    if (d == null) {
      d = new Date;
    }
    if (typeof d === 'string') {
      d = new Date(d);
    }
    for (k in formats) {
      f = formats[k];
      regex = new RegExp("%" + k, 'g');
      if (regex.test(text)) {
        text = text.replace(regex, f(d, loc));
      }
    }
    return text;
  };
  exports.separate_unit = separate_unit = function(d) {
    var T, r, s, u, x, _ref3;
    _ref3 = [{}, 1, [1000, 60, 60, 24, 7, 30 / 7, 12, 10, 10]], r = _ref3[0], x = _ref3[1], T = _ref3[2];
    r.unit = u = sum(T.map(function(n) {
      return d >= (x *= n);
    }));
    r.size = s = foldl(1, T.slice(0, u), function(a, b) {
      return a * b;
    });
    r.amount = round(d / s || 1);
    return r;
  };
  exports.ago = ago = function(dd, opts) {
    var amount, unit, _ref3, _ref4;
    if (opts == null) {
      opts = {};
    }
    if ((_ref3 = opts.locale) == null) {
      opts.locale = locale;
    }
    _ref4 = separate_unit(dd), amount = _ref4.amount, unit = _ref4.unit;
    return opts.locale.ago(amount, unit, opts);
  };
  exports.from_now = from_now = function(date, opts) {
    var _ref3;
    if (opts == null) {
      opts = {};
    }
    if (!date) {
      return;
    }
    if ((_ref3 = opts.locale) == null) {
      opts.locale = locale;
    }
    if (typeof date === 'string' || typeof date === 'number') {
      date = new Date(date);
    }
    return ago(now() - date.getTime(), opts) || strftime(opts.format, date, opts.locale);
  };
  exports.smart = function(elem, opts) {
    var interval, old_unit, res;
    if (opts == null) {
      opts = {};
    }
    opts = deepmerge(defaults, opts);
    old_unit = -1;
    interval = void 0;
    res = {
      stop: function() {
        if (interval != null) {
          return clearInterval(interval);
        }
      }
    };
    res.update = function() {
      var date, size, t, unit, _ref3;
      date = hook.update(elem, opts);
      if (!date > 0) {
        res.stop();
        interval = setInterval(res.update, opts.hook.interval);
        return;
      }
      _ref3 = separate_unit(date), unit = _ref3.unit, size = _ref3.size;
      if (unit === old_unit) {
        return;
      }
      if (unit > opts.smart.max_unit) {
        return res.stop();
      }
      t = (unit * size) || opts.hook.interval;
      res.stop();
      interval = setInterval(res.update, t);
      return old_unit = unit;
    };
    res.update();
    return res;
  };
  exports.hook = hook = function(elems, opts) {
    var interval, res;
    if (opts == null) {
      opts = {};
    }
    opts = deepmerge(defaults, opts);
    res = {
      stop: function() {
        return clearInterval(interval);
      },
      update: function() {
        return opts.hook.update(elems, opts);
      }
    };
    if (opts.update) {
      interval = setInterval(res.update, opts.hook.interval);
    }
    res.update();
    return res;
  };
  hook.update = function(el, opts) {
    var cls, date, title_format, _ref3, _ref4;
    if (opts == null) {
      opts = {};
    }
    date = (_ref3 = el != null ? typeof el.attr === "function" ? el.attr('data-date') : void 0 : void 0) != null ? _ref3 : el != null ? typeof el.attr === "function" ? el.attr('datetime') : void 0 : void 0;
    if (!(date != null)) {
      return;
    }
    if (typeof date === 'string' || typeof date === 'number') {
      date = new Date(date);
    }
    opts.format = el.attr('data-strftime') || opts.format;
    title_format = el.attr('data-strftitle') || opts.format;
    el.attr('title', strftime(title_format, date, opts.locale));
    cls = (_ref4 = el.attr('class')) != null ? _ref4 : "";
    if (cls.indexOf(opts.css.ago) !== -1) {
      el.text(from_now(date, opts));
      return now() - date.getTime();
    } else {
      el.text(strftime(opts.format, date, opts.locale));
      return date;
    }
  };
  hook.update.dynamictemplate = function(elems, opts) {
    var el, _i, _len;
    if (opts == null) {
      opts = {};
    }
    for (_i = 0, _len = elems.length; _i < _len; _i++) {
      el = elems[_i];
      hook.update(el, opts);
    }
  };
  hook.update.jQuery = function(elems, opts) {
    if (opts == null) {
      opts = {};
    }
    return $(elems).filter("time, [data-date]").each(function() {
      return hook.update($(this), opts);
    });
  };
  exports.options = defaults = {
    locale: locale,
    update: true,
    show_ago: true,
    hook: {
      interval: 5000,
      update: hook.update.jQuery
    },
    smart: {
      max_unit: 5
    },
    css: {
      ago: "ago"
    },
    max: {
      amount: 42,
      unit: 9
    },
    min: {
      amount: 5,
      unit: 1,
      string: "just now"
    }
  };
  if (typeof jQuery !== "undefined" && jQuery !== null) {
    jQuery.fn.formatdate = function(opts) {
      return hook(this, opts);
    };
  }
}).call(this);
